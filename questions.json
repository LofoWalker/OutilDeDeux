{
  "categories": [
    {
      "nom": "Java",
      "questions": [
        {
          "question": "Qu'est-ce qu'une variable locale en Java ?",
          "reponses": ["Une variable déclarée à l'intérieur d'une méthode et accessible uniquement dans cette méthode."],
          "difficulte": 1
        },
        {
          "question": "À quoi sert le mot-clé 'final' sur une variable ?",
          "reponses": ["Il rend la variable constante, sa valeur ne peut plus être modifiée après initialisation."],
          "difficulte": 1
        },
        {
          "question": "Comment déclare-t-on une méthode statique ?",
          "reponses": ["En utilisant le mot-clé 'static' dans la déclaration de la méthode."],
          "difficulte": 1
        },
        {
          "question": "Qu'est-ce qu'un constructeur ?",
          "reponses": ["Une méthode spéciale utilisée pour initialiser un objet lors de sa création."],
          "difficulte": 1
        },
        {
          "question": "Comment gérer une exception en Java ?",
          "reponses": ["En utilisant les blocs try-catch."],
          "difficulte": 2
        },
        {
          "question": "Quelle est la différence entre une ArrayList et un tableau en Java ?",
          "reponses": ["Une ArrayList est dynamique et peut changer de taille, alors qu'un tableau a une taille fixe."],
          "difficulte": 2
        },
        {
          "question": "Qu'est-ce qu'une exception en Java ?",
          "reponses": ["Une exception est un événement qui interrompt le flux normal d'un programme lors d'une erreur."],
          "difficulte": 2
        },
        {
          "question": "Qu'est-ce qu'une interface fonctionnelle ?",
          "reponses": ["Une interface qui ne contient qu'une seule méthode abstraite."],
          "difficulte": 2
        },
        {
          "question": "Quelle est la différence entre '=='' et 'equals()' pour comparer des objets ?",
          "reponses": ["'==' compare les références, 'equals()' compare le contenu des objets."],
          "difficulte": 2
        },
        {
          "question": "Qu'est-ce qu'une classe abstraite ?",
          "reponses": ["Une classe qui ne peut pas être instanciée et qui peut contenir des méthodes abstraites."],
          "difficulte": 2
        },
        {
          "question": "Expliquez le concept d'héritage en Java.",
          "reponses": ["L'héritage permet à une classe de réutiliser les propriétés et méthodes d'une autre classe."],
          "difficulte": 2
        },
        {
          "question": "Qu'est-ce qu'une lambda expression ?",
          "reponses": ["Une façon concise d'implémenter une interface fonctionnelle en Java."],
          "difficulte": 3
        },
        {
          "question": "À quoi sert le mot-clé 'super' ?",
          "reponses": ["Il permet d'accéder aux membres de la classe parente."],
          "difficulte": 2
        },
        {
          "question": "Qu'est-ce que le polymorphisme ?",
          "reponses": ["La capacité d'un objet à prendre plusieurs formes selon le contexte d'exécution."],
          "difficulte": 3
        },
        {
          "question": "Expliquez le fonctionnement du garbage collector en Java.",
          "reponses": ["Le garbage collector libère automatiquement la mémoire occupée par les objets non référencés."],
          "difficulte": 3
        }
      ]
    },
    {
      "nom": "Spring",
      "questions": [
        {
          "question": "Qu'est-ce qu'un bean dans Spring ?",
          "reponses": ["Un objet géré par le conteneur Spring."],
          "difficulte": 1
        },
        {
          "question": "Comment définir une propriété dans un fichier application.properties ?",
          "reponses": ["En écrivant 'clé=valeur' dans le fichier application.properties."],
          "difficulte": 1
        },
        {
          "question": "Comment lancer une application Spring Boot ?",
          "reponses": ["En exécutant la méthode main de la classe annotée avec @SpringBootApplication."],
          "difficulte": 1
        },
        {
          "question": "À quoi sert l'annotation @Autowired dans Spring ?",
          "reponses": ["Elle permet d'injecter automatiquement des dépendances dans un bean Spring."],
          "difficulte": 2
        },
        {
          "question": "Qu'est-ce que l'injection de dépendances ?",
          "reponses": ["Un principe qui consiste à fournir les dépendances d'une classe depuis l'extérieur."],
          "difficulte": 2
        },
        {
          "question": "À quoi sert l'annotation @Controller ?",
          "reponses": ["À indiquer qu'une classe gère des requêtes web dans une application Spring MVC."],
          "difficulte": 2
        },
        {
          "question": "À quoi sert l'annotation @RequestMapping ?",
          "reponses": ["À définir le mapping d'une URL sur une méthode ou une classe contrôleur."],
          "difficulte": 2
        },
        {
          "question": "Qu'est-ce que Spring Boot ?",
          "reponses": ["Un framework facilitant la création d'applications Spring autonomes et prêtes à l'emploi."],
          "difficulte": 2
        },
        {
          "question": "Qu'est-ce qu'un repository dans Spring Data ?",
          "reponses": ["Une interface qui permet d'accéder aux données d'une base via des méthodes prédéfinies."],
          "difficulte": 2
        },
        {
          "question": "Quelle est la différence entre @Component et @Service dans Spring ?",
          "reponses": ["@Service est une spécialisation de @Component utilisée pour les classes de service métier."],
          "difficulte": 3
        },
        {
          "question": "Qu'est-ce que le cycle de vie d'un bean ?",
          "reponses": ["Les différentes étapes de création, initialisation et destruction d'un bean dans le conteneur Spring."],
          "difficulte": 3
        },
        {
          "question": "À quoi sert l'annotation @Transactional ?",
          "reponses": ["À indiquer qu'une méthode ou classe doit être exécutée dans une transaction."],
          "difficulte": 3
        },
        {
          "question": "Qu'est-ce que l'inversion de contrôle (IoC) ?",
          "reponses": ["Un principe où le contrôle de l'instanciation des objets est délégué au framework."],
          "difficulte": 3
        },
        {
          "question": "Comment sécuriser une API avec Spring Security ?",
          "reponses": ["En configurant des règles d'authentification et d'autorisation dans le projet."],
          "difficulte": 4
        },
        {
          "question": "Qu'est-ce qu'un profil Spring ?",
          "reponses": ["Un mécanisme permettant de définir des configurations différentes selon l'environnement d'exécution."],
          "difficulte": 3
        }
      ]
    },
    {
      "nom": "Git",
      "questions": [
        {
          "question": "Quelle commande permet de cloner un dépôt distant ?",
          "reponses": ["git clone <url-du-depot>"],
          "difficulte": 1
        },
        {
          "question": "Comment créer une nouvelle branche ?",
          "reponses": ["git checkout -b <nom-branche>"],
          "difficulte": 1
        },
        {
          "question": "Quelle commande permet de voir l'historique des commits ?",
          "reponses": ["git log"],
          "difficulte": 1
        },
        {
          "question": "Comment ajouter tous les fichiers modifiés à l'index ?",
          "reponses": ["git add ."],
          "difficulte": 1
        },
        {
          "question": "Comment récupérer les dernières modifications du dépôt distant ?",
          "reponses": ["git pull"],
          "difficulte": 1
        },
        {
          "question": "Comment fusionner une branche dans la branche courante ?",
          "reponses": ["git merge <nom-branche>"],
          "difficulte": 2
        },
        {
          "question": "Comment résoudre un conflit de fusion ?",
          "reponses": ["En éditant les fichiers concernés, puis en ajoutant et commitant les modifications."],
          "difficulte": 2
        },
        {
          "question": "Quelle commande permet de supprimer une branche locale ?",
          "reponses": ["git branch -d <nom-branche>"],
          "difficulte": 2
        },
        {
          "question": "Comment afficher les différences entre deux commits ?",
          "reponses": ["git diff <commit1> <commit2>"],
          "difficulte": 2
        },
        {
          "question": "Comment annuler un fichier ajouté à l'index avant commit ?",
          "reponses": ["git reset <fichier>"],
          "difficulte": 2
        },
        {
          "question": "Comment taguer une version ?",
          "reponses": ["git tag <nom-tag>"],
          "difficulte": 2
        },
        {
          "question": "Quelle commande permet de supprimer un tag ?",
          "reponses": ["git tag -d <nom-tag>"],
          "difficulte": 2
        },
        {
          "question": "Comment configurer son nom d'utilisateur Git ?",
          "reponses": ["git config --global user.name 'Votre Nom'"],
          "difficulte": 1
        },
        {
          "question": "Comment afficher la liste des branches distantes ?",
          "reponses": ["git branch -r"],
          "difficulte": 2
        },
        {
          "question": "Comment annuler le dernier commit sans perdre les modifications locales ?",
          "reponses": ["git reset --soft HEAD~1"],
          "difficulte": 3
        }
      ]
    },
    {
      "nom": "Architecture",
      "questions": [
        {
          "question": "Qu'est-ce qu'une architecture en couches ?",
          "reponses": ["Une organisation du code en différentes couches ayant chacune une responsabilité spécifique (ex : présentation, service, accès aux données)."],
          "difficulte": 2
        },
        {
          "question": "Qu'est-ce qu'un monolithe ?",
          "reponses": ["Une application dont toutes les fonctionnalités sont regroupées dans un seul bloc déployable."],
          "difficulte": 1
        },
        {
          "question": "Qu'est-ce qu'une API REST ?",
          "reponses": ["Une interface permettant la communication entre systèmes via le protocole HTTP en respectant des contraintes d'architecture."],
          "difficulte": 2
        },
        {
          "question": "Qu'est-ce qu'un bus de messages ?",
          "reponses": ["Un système permettant l'échange de messages entre différentes parties d'une application."],
          "difficulte": 3
        },
        {
          "question": "Qu'est-ce qu'un load balancer ?",
          "reponses": ["Un composant qui répartit le trafic réseau entre plusieurs serveurs pour optimiser les ressources."],
          "difficulte": 2
        },
        {
          "question": "Qu'est-ce qu'un cache applicatif ?",
          "reponses": ["Un mécanisme permettant de stocker temporairement des données pour accélérer les accès futurs."],
          "difficulte": 2
        },
        {
          "question": "Qu'est-ce qu'un pattern Singleton ?",
          "reponses": ["Un patron de conception qui garantit qu'une classe n'a qu'une seule instance."],
          "difficulte": 2
        },
        {
          "question": "Qu'est-ce qu'un service stateless ?",
          "reponses": ["Un service qui ne conserve pas d'état entre deux requêtes d'un même client."],
          "difficulte": 3
        },
        {
          "question": "Qu'est-ce qu'un service stateful ?",
          "reponses": ["Un service qui conserve des informations sur l'état du client entre les requêtes."],
          "difficulte": 3
        },
        {
          "question": "Qu'est-ce qu'un reverse proxy ?",
          "reponses": ["Un serveur qui reçoit les requêtes des clients et les transmet aux serveurs internes appropriés."],
          "difficulte": 3
        },
        {
          "question": "Qu'est-ce qu'un CDN ?",
          "reponses": ["Un réseau de serveurs répartis géographiquement pour accélérer la distribution de contenu."],
          "difficulte": 2
        },
        {
          "question": "Qu'est-ce que le principe de séparation des responsabilités ?",
          "reponses": ["Chaque module ou classe doit avoir une seule responsabilité bien définie."],
          "difficulte": 2
        },
        {
          "question": "Qu'est-ce qu'un schéma de base de données relationnelle ?",
          "reponses": ["La structure qui définit les tables, les colonnes et les relations d'une base de données."],
          "difficulte": 2
        },
        {
          "question": "Qu'est-ce qu'une API GraphQL ?",
          "reponses": ["Une API qui permet de requêter précisément les données souhaitées via un langage de requête spécifique."],
          "difficulte": 3
        }
      ]
    },
    {
      "nom": "Clean Code",
      "questions": [
        {
          "question": "Pourquoi est-il important de nommer correctement ses variables ?",
          "reponses": ["Des noms explicites facilitent la compréhension et la maintenance du code."],
          "difficulte": 1
        },
        {
          "question": "Pourquoi faut-il éviter les fonctions trop longues ?",
          "reponses": ["Elles sont plus difficiles à comprendre, à tester et à maintenir."],
          "difficulte": 1
        },
        {
          "question": "Qu'est-ce qu'un commentaire inutile ?",
          "reponses": ["Un commentaire qui n'apporte aucune information supplémentaire par rapport au code."],
          "difficulte": 1
        },
        {
          "question": "Qu'est-ce que le principe DRY ?",
          "reponses": ["Don't Repeat Yourself : éviter la duplication de code."],
          "difficulte": 2
        },
        {
          "question": "Pourquoi faut-il limiter la portée des variables ?",
          "reponses": ["Pour réduire les effets de bord et faciliter la compréhension du code."],
          "difficulte": 2
        },
        {
          "question": "Qu'est-ce qu'un code spaghetti ?",
          "reponses": ["Un code difficile à suivre à cause d'une structure désorganisée."],
          "difficulte": 2
        },
        {
          "question": "Qu'est-ce qu'un code auto-documenté ?",
          "reponses": ["Un code dont la structure et les noms sont suffisamment explicites pour se passer de commentaires."],
          "difficulte": 2
        },
        {
          "question": "Pourquoi faut-il éviter les variables globales ?",
          "reponses": ["Elles rendent le code difficile à maintenir et à tester."],
          "difficulte": 2
        },
        {
          "question": "Qu'est-ce que le principe KISS ?",
          "reponses": ["Keep It Simple, Stupid : il faut privilégier la simplicité dans le code."],
          "difficulte": 2
        },
        {
          "question": "Pourquoi faut-il éviter les effets de bord ?",
          "reponses": ["Les effets de bord rendent le code imprévisible et difficile à tester."],
          "difficulte": 3
        },
        {
          "question": "Qu'est-ce qu'une fonction pure ?",
          "reponses": ["Une fonction qui, pour les mêmes entrées, retourne toujours la même sortie et n'a pas d'effet de bord."],
          "difficulte": 3
        },
        {
          "question": "Pourquoi faut-il écrire des tests unitaires ?",
          "reponses": ["Pour vérifier que chaque partie du code fonctionne comme prévu et faciliter la maintenance."],
          "difficulte": 2
        },
        {
          "question": "Qu'est-ce que le refactoring ?",
          "reponses": ["L'amélioration du code sans changer son comportement externe."],
          "difficulte": 2
        }
      ]
    }
  ]
}
